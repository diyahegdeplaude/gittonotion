name: Sync GitHub Issues to Notion

on:
  # Runs on new issue creation
  issues:
    types: [opened]

  # Allows manual triggering (for past issues)
  workflow_dispatch:

jobs:
  sync_issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests

      - name: Send new issue or sync all to Notion
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
        run: |
          python3 <<EOF
          import os
          import requests
          import json

          NOTION_API_KEY = os.environ['NOTION_API_KEY']
          DATABASE_ID = os.environ['NOTION_DATABASE_ID']
          headers = {
              "Authorization": f"Bearer {NOTION_API_KEY}",
              "Content-Type": "application/json",
              "Notion-Version": "2022-06-28"
          }

          def create_notion_page(title, body, url):
              data = {
                  "parent": { "database_id": DATABASE_ID },
                  "properties": {
                      "Name": {
                          "title": [{
                              "text": { "content": title }
                          }]
                      },
                      "Description": {
                          "rich_text": [{
                              "text": { "content": body or "No description" }
                          }]
                      },
                      "URL": {
                          "url": url
                      }
                  }
              }
              r = requests.post("https://api.notion.com/v1/pages", headers=headers, json=data)
              print(f"Created: {title} | Status: {r.status_code}")
              print("Payload sent to Notion:")
              print(json.dumps(data, indent=2))
              print("Response:")
              print(r.text)
              if r.status_code >= 300:
                  print(r.text)

          # Case 1: New Issue Event
          if 'ISSUE_TITLE' in os.environ:
              create_notion_page(os.environ['ISSUE_TITLE'], os.environ['ISSUE_BODY'], os.environ['ISSUE_URL'])

          # Case 2: Manual Trigger (sync past issues)
          else:
              import subprocess
              import datetime

              print("Fetching existing issues...")

              gh_cmd = [
                  "gh", "issue", "list", "--limit", "100",
                  "--json", "title,body,url,createdAt"
              ]
              try:
                  output = subprocess.check_output(gh_cmd, text=True)
                  issues = json.loads(output)
              except Exception as e:
                  print("Error fetching issues:", e)
                  issues = []

              for issue in issues:
                  create_notion_page(issue['title'], issue.get('body', ''), issue['url'])
          EOF
